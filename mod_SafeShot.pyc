'''SafeShot by Skino88'''
'''Version: 0.5'''


import Avatar
import BigWorld
import CommandMapping
import GUI
import Keys
import ResMgr
import functools
import math

from gui import g_keyEventHandlers
from gui.battle_control import g_sessionProvider
from gui.app_loader import g_appLoader
from ChatManager import chatManager
from messenger.gui.Scaleform.channels.bw_chat2 import battle_controllers


g_toggleTeamShot = True
g_toggleDeadShot = True
g_toggleDeadShotDisap = True
g_deadShotTime = 2.0
g_disableKey = Keys.KEY_LALT
g_toggledDisableKey = False
g_toggleTeamShootMessage = True
g_textMessage = '{playerName}, не мешай стрелять!'

g_originalShoot = None
g_originalTargetBlur = None
g_originalTargetFocus = None
g_originalVehicle_onEnterWorld = None
g_originalVehicle_onLeaveWorld = None

g_toggleMod = True
g_teamShotBlock = False
g_deadShotBlock = False
g_targetVehicle = None
g_targetVehicleDisap = None
g_targetVehicleDisapPos = None
g_leaveWorldVehicles = []

g_teamShootMessagePenalty = False
g_needTargetDeadCallback = False


def isTarget(vehicle):
	if g_toggleTeamShot:
		if BigWorld.player().team is vehicle.publicInfo['team']:
			if not g_sessionProvider.getCtx().isTeamKiller(vehicle.id):
				return False
	
	return True

def teamShotMessage():
	global g_teamShootMessagePenalty
	
	def teamShotMessagePenalty():
		global g_teamShootMessagePenalty
		
		g_teamShootMessagePenalty = False
		
		return
	
	if not g_teamShootMessagePenalty and g_targetVehicle:
		fullPlayerName = g_sessionProvider.getCtx().getFullPlayerName(g_targetVehicle.id, showVehShortName = True, showClan = True)
		if fullPlayerName:
			g_teamShootMessagePenalty = True
			textMessage = g_textMessage.replace('{playerName}', fullPlayerName)
			battle_controllers.TeamChannelController(chatManager.battleTeamChannelID)._broadcast(textMessage)
			BigWorld.callback(5.0, teamShotMessagePenalty)
	
	return

def targetDeadCallback():
	global g_deadShotBlock, g_needTargetDeadCallback, g_targetVehicle
	global g_targetVehicleDisap, g_targetVehicleDisapPos

	def deadShotPenalty():
		global g_deadShotBlock
		
		g_deadShotBlock = False
		
		return
	
	def isDisapTargetting():
		player = BigWorld.player()
		
		shotPointPosition = player.gunRotator.markerInfo[0]
		ownVehiclePosition = player.getOwnVehiclePosition()
		
		ownVehicleToShotPoint = (shotPointPosition - ownVehiclePosition)
		ownVehicleToShotPoint.normalise()
		
		ownVehicleToTarget = (g_targetVehicleDisapPos - ownVehiclePosition)
		ownVehicleToTarget.normalise()
		
		angle = math.acos(ownVehicleToShotPoint.x * ownVehicleToTarget.x + ownVehicleToShotPoint.y * ownVehicleToTarget.y + ownVehicleToShotPoint.z * ownVehicleToTarget.z)
		angle = math.degrees(angle)
		
		dist = (ownVehiclePosition - g_targetVehicleDisapPos).length
		
		return angle < math.degrees(math.atan2(2, 2 * dist) * 2) * 1.1
	
	if g_needTargetDeadCallback:
		if g_targetVehicle:
			if g_targetVehicle.isAlive():
				BigWorld.callback(0.0, targetDeadCallback)
			else:
				g_targetVehicle = None
				g_deadShotBlock = True
				g_needTargetDeadCallback = False
				BigWorld.callback(g_deadShotTime, deadShotPenalty)
		elif g_targetVehicleDisap:
			vehicleInfo = BigWorld.player().arena.vehicles.get(g_targetVehicleDisap.id)
			if vehicleInfo['isAlive']:
				if isDisapTargetting():
					BigWorld.callback(0.0, targetDeadCallback)
				else:
					g_targetVehicleDisap = None
					g_targetVehicleDisapPos = None
					g_deadShotBlock = False
					g_needTargetDeadCallback = False
			else:
				g_targetVehicleDisap = None
				g_targetVehicleDisapPos = None
				g_deadShotBlock = True
				g_needTargetDeadCallback = False
				BigWorld.callback(g_deadShotTime + 1.00, deadShotPenalty)
	
	return

def shoot_hook(avatarClassSpecimen, isRepeat = False):
	def shootCallback(avatarClassSpecimen):
		if CommandMapping.g_instance.isActive(CommandMapping.CMD_CM_SHOOT):
			shoot_hook(avatarClassSpecimen, isRepeat = True)
		
		return
	
	if (g_teamShotBlock or g_deadShotBlock) and g_toggleMod:
		BigWorld.callback(0.2, functools.partial(shootCallback, avatarClassSpecimen))
		g_appLoader.getDefBattleApp().call('battle.VehicleErrorsPanel.ShowMessage', ['SafeShot', '[SafeShot] Блокировка выстрела', 'red'])
		if g_toggleTeamShootMessage and g_teamShotBlock:
			teamShotMessage()
	else:
		g_originalShoot(avatarClassSpecimen, isRepeat)
	
	return

def targetFocus_hook(avatarClassSpecimen, vehicle):
	global g_targetVehicle, g_teamShotBlock, g_needTargetDeadCallback
	global g_targetVehicleDisap, g_targetVehicleDisapPos
	
	g_originalTargetFocus(avatarClassSpecimen, vehicle)
	
	g_targetVehicleDisap = None
	g_targetVehicleDisapPos = None
	
	if vehicle.isAlive():
		g_targetVehicle = vehicle
		g_needTargetDeadCallback = True
		BigWorld.callback(0.0, targetDeadCallback)
		if not isTarget(vehicle):
			g_teamShotBlock = True
	
	return

def targetBlur_hook(avatarClassSpecimen, vehicle):
	global g_targetVehicle, g_teamShotBlock, g_deadShotBlock, g_needTargetDeadCallback
	global g_targetVehicleDisap, g_targetVehicleDisapPos

	g_originalTargetBlur(avatarClassSpecimen, vehicle)
	
	g_targetVehicle = None
	g_teamShotBlock = False

	if vehicle in g_leaveWorldVehicles:
		g_targetVehicleDisap = vehicle
		g_targetVehicleDisapPos = vehicle.position
	else:
		g_deadShotBlock = False
		g_needTargetDeadCallback = False
	
	return

def vehicle_onEnterWorld_hook(avatarClassSpecimen, vehicle):
	global g_leaveWorldVehicles, g_targetVehicleDisap, g_targetVehicleDisapPos
	
	g_originalVehicle_onEnterWorld(avatarClassSpecimen, vehicle)
	
	if vehicle is g_targetVehicleDisap:
		g_targetVehicleDisap = None
		g_targetVehicleDisapPos = None
	
	if vehicle in g_leaveWorldVehicles:
		g_leaveWorldVehicles.remove(vehicle)
	
	return

def vehicle_onLeaveWorld_hook(avatarClassSpecimen, vehicle):
	global g_leaveWorldVehicles
	
	g_originalVehicle_onLeaveWorld(avatarClassSpecimen, vehicle)
	
	g_leaveWorldVehicles.append(vehicle)
	
	return
	
def handleKeyEvent(event):
	global g_toggleMod
	
	if event.key is g_disableKey:
		if hasattr(BigWorld.player(), 'isOnArena') and BigWorld.player().isOnArena:
			if not g_toggledDisableKey:
				g_toggleMod = not event.isKeyDown()
			else:
				if event.isKeyDown():
					if g_toggleMod:
						g_toggleMod = False
						g_appLoader.getDefBattleApp().call('battle.PlayerMessagesPanel.ShowMessage', ['SafeShot', 'SafeShot OFF', 'gold'])
					else:
						g_toggleMod = True
						g_appLoader.getDefBattleApp().call('battle.PlayerMessagesPanel.ShowMessage', ['SafeShot', 'SafeShot ON', 'gold'])
	
	return False

def init():
	global g_toggleTeamShot, g_toggleDeadShot, g_toggleDeadShotDisap, g_deadShotTime, g_disableKey, g_toggledDisableKey, g_toggleTeamShootMessage, g_textMessage
	global g_originalShoot, g_originalTargetBlur, g_originalTargetFocus, g_originalVehicle_onEnterWorld, g_originalVehicle_onLeaveWorld
	
	print '[SafeShot] Version: 0.5 by Skino88'
	
	xml = ResMgr.openSection('scripts/client/gui/mods/mod_SafeShot.xml')
	if xml:
		g_toggleTeamShot = xml.readBool('teamShot', g_toggleTeamShot)
		g_toggleDeadShot = xml.readBool('deadShot', g_toggleDeadShot)
		g_toggleDeadShotDisap = xml.readBool('deadShotDisappeared', g_toggleDeadShotDisap)
		g_deadShotTime = xml.readFloat('deadShotTime', g_deadShotTime)
		g_deadShotTime = max(0.5, g_deadShotTime)
		g_deadShotTime = min(4.0, g_deadShotTime)
		disableKeyString = xml.readString('disableKey', 'KEY_LALT')
		if hasattr(Keys, disableKeyString):
			g_disableKey = getattr(Keys, disableKeyString)
		g_toggledDisableKey = xml.readBool('toggledDisableKey', g_toggledDisableKey)
		g_toggleTeamShootMessage = xml.readBool('toggleMessage', g_toggleTeamShootMessage)
		g_textMessage = xml.readString('textMessage', g_textMessage)
	else:
		print '[SafeShot] Unable to load scripts/client/gui/mods/mod_SafeShot.xml, load default values.'
	
	g_originalShoot = Avatar.PlayerAvatar.shoot
	g_originalTargetFocus = Avatar.PlayerAvatar.targetFocus
	g_originalTargetBlur = Avatar.PlayerAvatar.targetBlur
	
	g_originalVehicle_onEnterWorld = Avatar.PlayerAvatar.vehicle_onEnterWorld
	g_originalVehicle_onLeaveWorld = Avatar.PlayerAvatar.vehicle_onLeaveWorld
	
	Avatar.PlayerAvatar.shoot = shoot_hook
	Avatar.PlayerAvatar.targetFocus = targetFocus_hook
	Avatar.PlayerAvatar.targetBlur = targetBlur_hook
	
	if g_toggleDeadShotDisap:
		Avatar.PlayerAvatar.vehicle_onEnterWorld = vehicle_onEnterWorld_hook
		Avatar.PlayerAvatar.vehicle_onLeaveWorld = vehicle_onLeaveWorld_hook
	
	g_keyEventHandlers.add(handleKeyEvent)
	
	return
